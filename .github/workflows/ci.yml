name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: '22.19.0'

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Start Typesense
        run: |
          docker run -d --name typesense-test \
            -p 8108:8108 \
            -v $(pwd)/typesense-data:/data \
            typesense/typesense:0.25.2 \
            --data-dir /data \
            --api-key xyz \
            --enable-cors

          # Wait for Typesense to be ready
          timeout 30 bash -c 'until curl -f http://localhost:8108/health; do sleep 1; done'

      - name: Lint code
        run: pnpm lint

      - name: Run unit tests
        run: pnpm test:unit

      - name: Run integration tests
        run: pnpm test:int
        env:
          MONGODB_URI: mongodb://localhost:27017/payload-test
          TYPESENSE_API_KEY: xyz
          TYPESENSE_NODES: '[{"host":"localhost","port":"8108","protocol":"http"}]'

      # E2E tests disabled - require full dev environment setup
      # - name: Install Playwright browsers
      #   run: pnpm exec playwright install
      # - name: Run E2E tests
      #   run: pnpm test:e2e

      - name: Stop Typesense
        if: always()
        run: |
          docker stop typesense-test || true
          docker rm typesense-test || true

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build package
        run: pnpm build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  release:
    name: Automated Release
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: write
      issues: write
      pull-requests: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Configure NPM Registry
        run: |
          echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
          echo "registry=https://registry.npmjs.org/" >> ~/.npmrc
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Build package
        run: pnpm build

      - name: Debug NPM Token
        run: |
          echo "NPM_TOKEN length: ${#NPM_TOKEN}"
          echo "NPM_TOKEN starts with npm_: $(echo $NPM_TOKEN | grep -q '^npm_' && echo 'YES' || echo 'NO')"
          echo "Testing NPM authentication..."
          npm whoami --registry https://registry.npmjs.org/ || echo "NPM authentication failed"
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Semantic Release
        id: semantic-release
        run: pnpm semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Upload build artifacts
        if: steps.semantic-release.outputs.new-release-published == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ steps.semantic-release.outputs.new-release-version }}
          path: dist/

  pr-validation:
    name: PR Validation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Start Typesense
        run: |
          docker run -d --name typesense-test \
            -p 8108:8108 \
            -v $(pwd)/typesense-data:/data \
            typesense/typesense:0.25.2 \
            --data-dir /data \
            --api-key xyz \
            --enable-cors

          # Wait for Typesense to be ready
          timeout 30 bash -c 'until curl -f http://localhost:8108/health; do sleep 1; done'

      - name: Lint code
        run: pnpm lint

      - name: Run unit tests
        run: pnpm test:unit

      - name: Run integration tests
        run: pnpm test:int
        env:
          MONGODB_URI: mongodb://localhost:27017/payload-test
          TYPESENSE_API_KEY: xyz
          TYPESENSE_NODES: '[{"host":"localhost","port":"8108","protocol":"http"}]'

      - name: Build package
        run: pnpm build

      - name: Check for breaking changes
        id: breaking-changes
        run: |
          if echo "${{ github.event.pull_request.title }} ${{ github.event.pull_request.body }}" | grep -iE "(breaking|major|!feat|!fix)"; then
            echo "has-breaking-changes=true" >> $GITHUB_OUTPUT
          else
            echo "has-breaking-changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Validate commit messages
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          types: |
            feat
            fix
            docs
            style
            refactor
            perf
            test
            build
            ci
            chore
            revert
          requireScope: false
          subjectPattern: ^(?![A-Z]).+$

      - name: Comment PR
        uses: actions/github-script@v7
        if: steps.breaking-changes.outputs.has-breaking-changes == 'true'
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `⚠️ **Breaking Changes Detected**
              
              This PR appears to contain breaking changes. Please ensure:
              
              - [ ] Breaking changes are documented in the PR description
              - [ ] Version bump will be appropriate (major version)
              - [ ] Migration guide is provided if needed
              - [ ] All tests pass
              
              The automated release system will create a major version bump for this PR.`
            })

      - name: Stop Typesense
        if: always()
        run: |
          docker stop typesense-test || true
          docker rm typesense-test || true

  security:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: pnpm audit --audit-level high
