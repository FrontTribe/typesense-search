name: Deploy Documentation

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: 'pages'
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.19.0'
          cache: 'npm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '10.14.0'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build documentation
        run: |
          # Create docs directory
          mkdir -p docs

          # Copy README as index
          cp README.md docs/index.md

          # Create additional documentation pages
          cat > docs/installation.md << 'EOF'
          # Installation

          ## Prerequisites

          - Node.js 22.19.0+ or 20.9.0+
          - Payload CMS 3.37.0+
          - Typesense 0.25.2+
          - pnpm (recommended)

          ## Install the Plugin

          ```bash
          npm install typesense-search-plugin
          # or
          yarn add typesense-search-plugin
          # or
          pnpm add typesense-search-plugin
          ```

          ## Setup Typesense

          ### Option 1: Docker Compose (Recommended)

          ```bash
          docker-compose up -d
          ```

          ### Option 2: Manual Docker Setup

          ```bash
          docker run -p 8108:8108 -v/tmp/typesense-data:/data typesense/typesense:0.25.2 --data-dir /data --api-key=xyz --enable-cors
          ```

          ## Configure Payload CMS

          Add the plugin to your Payload configuration:

          ```typescript
          import { typesenseSearch } from 'typesense-search-plugin'

          export default buildConfig({
            plugins: [
              typesenseSearch({
                typesense: {
                  apiKey: 'xyz',
                  nodes: [{ host: 'localhost', port: 8108, protocol: 'http' }],
                },
                collections: {
                  // your collections config
                },
              }),
            ],
          })
          ```
          EOF

          cat > docs/api.md << 'EOF'
          # API Reference

          ## Search Endpoints

          ### Universal Search

          Search across all collections:

          ```http
          GET /api/search?q={query}&per_page={limit}
          ```

          ### Collection-Specific Search

          Search a specific collection:

          ```http
          GET /api/search/{collection}?q={query}&per_page={limit}
          ```

          ### Advanced Search

          POST request with filters:

          ```http
          POST /api/search/{collection}
          Content-Type: application/json

          {
            "q": "search query",
            "page": 1,
            "per_page": 10,
            "sort_by": "createdAt:desc",
            "filters": {
              "status": "published"
            }
          }
          ```

          ### Search Suggestions

          Get autocomplete suggestions:

          ```http
          GET /api/search/{collection}/suggest?q={query}&limit={limit}
          ```

          ### Collections Metadata

          Get available collections:

          ```http
          GET /api/search/collections
          ```
          EOF

          cat > docs/components.md << 'EOF'
          # React Components

          ## UnifiedSearchInput

          A comprehensive search input component with built-in result display.

          ```tsx
          import { UnifiedSearchInput } from 'typesense-search-plugin'

          function SearchPage() {
            return (
              <UnifiedSearchInput
                baseUrl="http://localhost:3000"
                placeholder="Search everything..."
                onResultClick={(result) => {
                  console.log('Selected:', result.document)
                }}
                onSearch={(query) => {
                  console.log('Search:', query)
                }}
                onResults={(results) => {
                  console.log('Results:', results)
                }}
                onError={(error) => {
                  console.error('Error:', error)
                }}
                debounceMs={300}
                minQueryLength={2}
                perPage={10}
                showLoading={true}
                showSearchTime={true}
                showResultCount={true}
              />
            )
          }
          ```

          ## Custom Rendering

          Customize how search results are displayed:

          ```tsx
          <UnifiedSearchInput
            baseUrl="http://localhost:3000"
            renderResult={(hit, index) => (
              <div key={index} className="custom-result">
                <h3>{hit.document.title}</h3>
                <p>{hit.document.description}</p>
              </div>
            )}
            renderNoResults={(query) => (
              <div>No results for "{query}"</div>
            )}
            renderLoading={() => (
              <div>Searching...</div>
            )}
          />
          ```
          EOF

          cat > docs/troubleshooting.md << 'EOF'
          # Troubleshooting

          ## Common Issues

          ### Search Not Working

          **Problem**: Search returns no results or errors.

          **Solutions**:
          1. Check Typesense connection and API key
          2. Verify collection configuration
          3. Ensure data is synced to Typesense
          4. Check network connectivity

          ### No Results Returned

          **Problem**: Search queries return empty results.

          **Solutions**:
          1. Verify collection configuration and enabled status
          2. Check search fields configuration
          3. Ensure data exists in Typesense
          4. Try different search terms

          ### Slow Search Performance

          **Problem**: Search is slow or times out.

          **Solutions**:
          1. Check Typesense performance
          2. Verify network latency
          3. Optimize search parameters
          4. Check server resources

          ### CORS Errors

          **Problem**: Browser CORS errors when searching.

          **Solutions**:
          1. Ensure Typesense CORS is enabled
          2. Check API endpoint accessibility
          3. Verify baseUrl configuration

          ## Debug Mode

          Enable debug logging:

          ```typescript
          // In development
          console.log('Search debug:', {
            collections: await fetch('/api/search/collections').then(r => r.json()),
            universalSearch: await fetch('/api/search?q=test').then(r => r.json()),
          })
          ```

          ## Getting Help

          If you're still experiencing issues:

          1. Check the [GitHub Issues](https://github.com/fronttribe/typesense-search/issues)
          2. Create a new issue with detailed information
          3. Join our community discussions
          EOF

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
